pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('your-aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('your-aws-secret-access-key')
        AWS_REGION = 'us-east-1' // Change as needed
        INSTANCE_TYPE = 't2.micro' // Change as needed
        AMI_ID = 'ami-0abcdef1234567890' // Replace with a valid AMI ID
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo/your-python-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerfile = '''
                    FROM python:3.9-slim

                    WORKDIR /app

                    COPY . .

                    RUN pip install --no-cache-dir -r requirements.txt

                    CMD ["python", "your_script.py"]
                    '''
                    writeFile file: 'Dockerfile', text: dockerfile
                    sh 'docker build -t your-image-name:latest .'
                }
            }
        }

        stage('Create EC2 Instance') {
            steps {
                script {
                    // Create EC2 instance
                    def instanceId = sh(script: '''
                        aws ec2 run-instances --image-id ${AMI_ID} --count 1 --instance-type ${INSTANCE_TYPE} \
                        --key-name your-key-pair-name --query "Instances[0].InstanceId" --output text
                    ''', returnStdout: true).trim()
                    
                    // Wait until the instance is running
                    sh "aws ec2 wait instance-running --instance-ids ${instanceId}"
                    echo "Created EC2 instance: ${instanceId}"
                    
                    // Get the public DNS name of the instance
                    env.INSTANCE_DNS = sh(script: "aws ec2 describe-instances --instance-ids ${instanceId} --query 'Reservations[0].Instances[0].PublicDnsName' --output text", returnStdout: true).trim()
                }
            }
        }

        stage('Deploy Docker on EC2') {
            steps {
                script {
                    // Install Docker on the instance and run the container
                    sh """
                    ssh -o StrictHostKeyChecking=no -i /path/to/your-key-pair.pem ec2-user@${INSTANCE_DNS} '
                        sudo yum update -y &&
                        sudo amazon-linux-extras install docker -y &&
                        sudo service docker start &&
                        sudo docker pull your-image-name:latest &&
                        sudo docker run --rm your-image-name:latest
                    '
                    """
                }
            }
        }
    }
    
    post {
        always {
            sh 'aws ec2 terminate-instances --instance-ids ${INSTANCE_ID} || true'
            echo "Terminated EC2 instance: ${INSTANCE_ID}"
        }
    }
}
